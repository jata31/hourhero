name: Build, Test and Deploy

on:
  repository_dispatch:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
    branches:
      - main
  
env:
  serviceName: callhub-connect

jobs:
  Test:
    runs-on: ubuntu-latest

    steps:
      - name: üõí Checkout
        uses: actions/checkout@v3

      - name: üèó Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: üîÑ Restore dependencies
        run: dotnet restore
        working-directory: backend

      - name: üî® Build
        run: dotnet build --configuration Release
        working-directory: backend

      - name: üîé Test
        run: dotnet test --configuration Release --logger GitHubActions --nologo -v m --no-build backend/CallHubConnect/CallHubConnect.Tests.Unit

      - name: üåâ Test Architecture
        run: dotnet test --configuration Release --logger GitHubActions --nologo -v m --no-build backend/CallHubConnect/CallHubConnect.Tests.Arch

  Publish:
    if: github.event_name != 'pull_request'
    needs: [ Test ]
    runs-on: ubuntu-latest

    steps:
      - name: üõí Checkout
        uses: actions/checkout@v3

      - name: ‚¨áÔ∏è Download docker action
        uses: actions/checkout@v3
        with:
          repository: unizell/kubernetes-cluster-service-deployment
          path: common
          ref: main
          token: ${{ secrets.CHECKOUT_PAT }}

      - name: üê≥ Build and push docker image
        uses: ./common/actions/docker-build-deploy
        with:
          docker_user: ${{secrets.DOCKER_USER}}
          docker_password: ${{secrets.DOCKER_PASSWORD}}
          service_name: ${{ env.serviceName }}
          tag: ${{ github.sha }}

  DeployStaging:
    needs: [ Publish ]
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: ‚¨áÔ∏è Download common actions
        uses: actions/checkout@v3
        with:
          repository: unizell/kubernetes-cluster-service-deployment
          token: ${{ secrets.CHECKOUT_PAT }}

      - name: ‚òÅÔ∏è Deploy via helm
        uses: ./actions/deploy-via-helm
        with:
          kube_config: ${{ secrets.KUBE_CONFIG_STAGING }}
          service_name: ${{ env.serviceName }}
          helm_config: |
            containerImage.repository:unizell/${{ env.serviceName }}
            containerImage.tag:${{ github.sha }}
            serviceName:${{ env.serviceName }}-service
            appName:${{ env.serviceName }}
            containerPort:8080

  RollbackStaging:
    runs-on: ubuntu-latest
    needs: [ DeployStaging ]
    if: always() && (needs.deployStaging.result == 'failure')

    steps:
      - name: üìÑ Needs context
        env:
          NEEDS_CONTEXT: ${{ toJSON(needs) }}
        run: |
          echo "$NEEDS_CONTEXT"

      - name: üîì Configure access to kubernetes cluster
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: ‚Ü©Ô∏è Rollback
        run: kubectl rollout undo deployment/${{ env.serviceName }} --namespace=${{ env.serviceName }}

  DeployProduction:
    needs: [ DeployStaging ]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: ‚¨áÔ∏è Download common actions
        uses: actions/checkout@v3
        with:
          repository: unizell/kubernetes-cluster-service-deployment
          token: ${{ secrets.CHECKOUT_PAT }}

      - name: ‚òÅÔ∏è Deploy via helm
        uses: ./actions/deploy-via-helm
        with:
          kube_config: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
          service_name: ${{ env.serviceName }}
          helm_config: |
            containerImage.repository:unizell/${{ env.serviceName }}
            containerImage.tag:${{ github.sha }}
            serviceName:${{ env.serviceName }}-service
            appName:${{ env.serviceName }}
            containerPort:8080
